"""
Configuration management system for the LM Vulnerability Judge.
"""

import os
import json
import yaml
from typing import Dict, Any, Optional
from pathlib import Path

from ..config.templates import DEFAULT_CONFIG, AGENT_CONFIGS, JUDGE_CONFIGS, VULNERABILITY_CONFIGS


class Config:
    """Configuration manager for the vulnerability judge system."""
    
    def __init__(self, config_path: Optional[str] = None, config_dict: Optional[Dict] = None):
        """
        Initialize configuration from file or dictionary.
        
        Args:
            config_path: Path to configuration file (JSON or YAML)
            config_dict: Configuration dictionary (overrides file)
        """
        self.config = DEFAULT_CONFIG.copy()
        
        if config_path and os.path.exists(config_path):
            self._load_from_file(config_path)
        
        if config_dict:
            self._merge_config(config_dict)
        
        # Load API keys from environment if not provided
        self._load_env_variables()
    
    def _load_from_file(self, config_path: str) -> None:
        """Load configuration from JSON or YAML file."""
        config_path = Path(config_path)
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                if config_path.suffix.lower() in ['.yaml', '.yml']:
                    file_config = yaml.safe_load(f)
                else:
                    file_config = json.load(f)
            
            self._merge_config(file_config)
        except Exception as e:
            raise ValueError(f"Failed to load config from {config_path}: {e}")
    
    def _merge_config(self, new_config: Dict[str, Any]) -> None:
        """Merge new configuration with existing configuration."""
        def deep_merge(base: Dict, update: Dict) -> Dict:
            for key, value in update.items():
                if key in base and isinstance(base[key], dict) and isinstance(value, dict):
                    deep_merge(base[key], value)
                else:
                    base[key] = value
            return base
        
        deep_merge(self.config, new_config)
    
    def _load_env_variables(self) -> None:
        """Load API keys and other settings from environment variables."""
        env_mappings = {
            'OPENAI_API_KEY': ['api', 'openai_api_key'],
            'OPENAI_API_BASE': ['api', 'openai_api_base'], 
            'ANTHROPIC_API_KEY': ['api', 'anthropic_api_key'],
        }
        
        for env_var, config_path in env_mappings.items():
            value = os.getenv(env_var)
            if value:
                self._set_nested_value(config_path, value)
    
    def _set_nested_value(self, path: list, value: Any) -> None:
        """Set a nested configuration value."""
        current = self.config
        for key in path[:-1]:
            if key not in current:
                current[key] = {}
            current = current[key]
        current[path[-1]] = value
    
    def get(self, path: str, default: Any = None) -> Any:
        """
        Get configuration value using dot notation.
        
        Args:
            path: Dot-separated path to configuration value (e.g., 'agents.mini_swe_agent.enabled')
            default: Default value if path not found
            
        Returns:
            Configuration value or default
        """
        keys = path.split('.')
        current = self.config
        
        try:
            for key in keys:
                current = current[key]
            return current
        except KeyError:
            return default
    
    def set(self, path: str, value: Any) -> None:
        """
        Set configuration value using dot notation.
        
        Args:
            path: Dot-separated path to configuration value
            value: Value to set
        """
        keys = path.split('.')
        self._set_nested_value(keys, value)
    
    def get_agent_config(self, agent_name: str) -> Dict[str, Any]:
        """Get configuration for a specific agent."""
        return self.config.get('agents', {}).get(agent_name, {})
    
    def get_judge_config(self, judge_name: str = 'primary') -> Dict[str, Any]:
        """Get configuration for a specific judge."""
        return self.config.get('judges', {}).get(judge_name, {})
    
    def get_vulnerability_config(self, cwe_id: str) -> Dict[str, Any]:
        """Get configuration for a specific vulnerability type."""
        return self.config.get('vulnerabilities', {}).get(cwe_id, {})
    
    def get_all_vulnerabilities(self) -> list:
        """Get list of all configured vulnerability types."""
        return list(self.config.get('vulnerabilities', {}).keys())
    
    def save(self, config_path: str) -> None:
        """Save current configuration to file."""
        config_path = Path(config_path)
        config_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(config_path, 'w', encoding='utf-8') as f:
            if config_path.suffix.lower() in ['.yaml', '.yml']:
                yaml.dump(self.config, f, default_flow_style=False, indent=2)
            else:
                json.dump(self.config, f, indent=2)
    
    def validate(self) -> list:
        """
        Validate configuration and return list of errors.
        
        Returns:
            List of validation error messages
        """
        errors = []
        
        # Check if at least one agent is enabled
        agents = self.config.get('agents', {})
        if not any(agent.get('enabled', False) for agent in agents.values()):
            errors.append("No agents are enabled")
        
        # Check if at least one judge is enabled  
        judges = self.config.get('judges', {})
        if not any(judge.get('enabled', False) for judge in judges.values()):
            errors.append("No judges are enabled")
        
        # Check API keys for enabled judges
        for judge_name, judge_config in judges.items():
            if judge_config.get('enabled', False):
                judge_type = judge_config.get('type')
                if judge_type == 'openai' and not self.get('api.openai_api_key'):
                    errors.append(f"OpenAI API key required for judge '{judge_name}'")
                elif judge_type == 'anthropic' and not self.get('api.anthropic_api_key'):
                    errors.append(f"Anthropic API key required for judge '{judge_name}'")
        
        return errors
    
    def __str__(self) -> str:
        """String representation of configuration."""
        return json.dumps(self.config, indent=2)


def create_default_config(config_path: str) -> None:
    """Create a default configuration file."""
    config = Config()
    config.save(config_path)


def load_config(config_path: Optional[str] = None) -> Config:
    """Load configuration from file or create default."""
    if config_path and os.path.exists(config_path):
        return Config(config_path=config_path)
    else:
        return Config()
