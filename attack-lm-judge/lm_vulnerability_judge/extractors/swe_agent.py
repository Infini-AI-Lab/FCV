"""
Extractor for SWE Agent format outputs.
"""

import json
from typing import List, Dict, Any
from pathlib import Path

from .base import BaseExtractor, PatchInfo, FunctionalTestResult


class SweAgentExtractor(BaseExtractor):
    """Extractor for SWE Agent prediction and evaluation files."""
    
    def extract_patches(self) -> List[PatchInfo]:
        """
        Extract patches from SWE Agent preds.json file.
        
        Returns:
            List of PatchInfo objects
        """
        patches = []
        
        preds_path = self.config.get('preds_path')
        if not preds_path:
            print("Warning: No preds_path specified for SWE Agent")
            return patches
        
        preds_file = Path(preds_path)
        if not preds_file.exists():
            print(f"Warning: Predictions file not found: {preds_file}")
            return patches
        
        try:
            with open(preds_file, 'r', encoding='utf-8') as f:
                predictions = json.load(f)
            
            for instance_id, pred_data in predictions.items():
                patch_content = pred_data.get('model_patch', '')
                
                if not self.validate_patch(patch_content):
                    continue
                
                # Parse file changes and patch size
                changed_files, patch_size = self._parse_diff(patch_content)
                
                # Extract model name from prediction data
                model_name = self._extract_model_name(pred_data)
                
                patch_info = PatchInfo(
                    instance_id=instance_id,
                    agent_name=self.agent_name,
                    model_name=model_name,
                    patch_content=patch_content,
                    is_functionally_correct=False,  # Will be set later
                    test_passed=False,  # Will be set later
                    file_changes=changed_files,
                    patch_size=patch_size,
                    metadata={
                        'source_file': str(preds_file),
                        **pred_data
                    }
                )
                
                patches.append(patch_info)
                
        except Exception as e:
            print(f"Warning: Failed to process SWE Agent predictions file {preds_file}: {e}")
        
        return patches
    
    def extract_functional_tests(self) -> List[FunctionalTestResult]:
        """
        Extract functional test results from SB-CLI reports.
        
        Returns:
            List of FunctionalTestResult objects
        """
        test_results = []
        
        reports_path = self.config.get('reports_path')
        if not reports_path:
            print("Warning: No reports_path specified for SWE Agent")
            return test_results
        
        reports_file = Path(reports_path)
        if not reports_file.exists():
            print(f"Warning: Reports file not found: {reports_file}")
            return test_results
        
        try:
            with open(reports_file, 'r', encoding='utf-8') as f:
                report_data = json.load(f)
            
            # Extract resolved instances (functionally correct)
            resolved_instances = report_data.get('resolved_ids', [])
            completed_instances = report_data.get('completed_ids', [])
            
            # Create test results for resolved instances
            for instance_id in resolved_instances:
                test_result = FunctionalTestResult(
                    instance_id=instance_id,
                    passed=True,
                    test_status='resolved',
                    metadata={
                        'source_file': str(reports_file),
                        'total_instances': report_data.get('total_instances', 0),
                        'resolved_count': len(resolved_instances),
                        **report_data
                    }
                )
                test_results.append(test_result)
            
            # Create test results for unresolved instances
            unresolved_instances = [
                instance_id for instance_id in completed_instances 
                if instance_id not in resolved_instances
            ]
            
            for instance_id in unresolved_instances:
                test_result = FunctionalTestResult(
                    instance_id=instance_id,
                    passed=False,
                    test_status='unresolved',
                    metadata={
                        'source_file': str(reports_file),
                        'total_instances': report_data.get('total_instances', 0),
                        'resolved_count': len(resolved_instances),
                        **report_data
                    }
                )
                test_results.append(test_result)
                
        except Exception as e:
            print(f"Warning: Failed to process SWE Agent reports file {reports_file}: {e}")
        
        return test_results
