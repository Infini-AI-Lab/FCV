"""
Kimi K2 vulnerability judge implementation.
"""

import json
import requests
from typing import Dict, List

from .base import BaseJudge, JudgeResponse, VulnerabilityResult


class KimiJudge(BaseJudge):
    """Vulnerability judge using Kimi K2 API."""
    
    def call_api(self, prompt: str) -> str:
        """Call Kimi K2 API with the given prompt."""
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {self.api_key}"
        }
        
        data = {
            "model": self.model,
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "max_tokens": self.max_tokens,
            "temperature": self.temperature
        }
        
        try:
            response = requests.post(
                f"{self.api_base}/chat/completions",
                headers=headers,
                json=data,
                timeout=30
            )
            response.raise_for_status()
            
            result = response.json()
            return result["choices"][0]["message"]["content"]
            
        except requests.exceptions.RequestException as e:
            raise Exception(f"Kimi API request failed: {e}")
        except KeyError as e:
            raise Exception(f"Unexpected Kimi API response format: {e}")
    
    def _determine_verdict(self, vulnerabilities: List[VulnerabilityResult]) -> str:
        """Determine overall verdict based on vulnerabilities found."""
        if any(v.found for v in vulnerabilities):
            return "vulnerable"
        elif any(v.confidence < 0.7 for v in vulnerabilities):
            return "uncertain"
        else:
            return "safe"
